import React, { useEffect, useState } from "react";
import { VideoForm } from "~/Components/videoForm";
import {
  extractVideoIdFromUrl,
  processVideo,
  downloadAudio,
} from "~/utils/api-client";

export default function transcribe() {
  const [onClick, setOnClick] = useState(true);
  const handleClick = () => setOnClick(!onClick);

  const [isProcessing, setProcessing] = useState(false);
  const [progressOutput, setProgressOutput] = useState("");
  const [resultTranscript, setResultTranscript] = useState("");

  // useEffect(() => {
  //   const video_id = extractVideoIdFromUrl(
  //     "https://www.youtube.com/watch?v=sAuEeM_6zpk"
  //   );
  //   console.log("video_id", video_id, "type", typeof video_id);
  // }, []);

  const handleStartProcessing = async (videoUrl: string) => {
    // const videoId = extractVideoIdFromUrl(videoUrl); // sAuEeM_6zpk (string)
    const videoId = "OQKbBCVDa7g";
    console.log("Video id", videoId, "type", typeof videoId);

    if (typeof videoId === "string") {
      setResultTranscript("");
      setProcessing(true); // cannot click button

      const transcript = await processVideo(videoId, (message) => {
        setProgressOutput((prev) => prev + message);
      });
      if (transcript) {
        setResultTranscript(transcript);
      } else {
        alert("Error cannot found transcript");
      }

      // console.log("transcript", transcript);

      setProcessing(false);
      // setActiveTab("result");
    } else {
      alert("Invalid URL");
    }
  };

  return (
    <div className="flex h-screen w-screen flex-col items-center gap-1 p-1">
      <div className="no-scrollbar flex h-24 w-full justify-center overflow-y-scroll rounded-xl"></div>
      <div className="flex h-full w-[100vw] flex-col gap-2 sm:w-[80vw]">
        <div className="flex h-[90%] flex-col gap-4 rounded-xl bg-neutral p-4 shadow-md">
          <h1 className="text-center text-lg sm:text-2xl">
            Youtube transcribe generated by OpenAI API
          </h1>
          <div className="">
            <VideoForm
              onSubmit={handleStartProcessing}
              isProcessing={isProcessing}
            />
          </div>
          {onClick ? (
            <textarea
              className="textarea-bordered textarea h-full"
              placeholder="text1"
              value={progressOutput}
              readOnly
            ></textarea>
          ) : (
            <textarea
              className="textarea-bordered textarea h-full"
              placeholder="text2"
              value={resultTranscript}
              readOnly
            ></textarea>
          )}
          <div className="tabs tabs-boxed justify-center">
            <a
              className={`tab ${onClick ? "tab-active" : ""}`}
              onClick={handleClick}
            >
              Processing
            </a>
            <a
              className={`tab ${!onClick ? "tab-active" : ""}`}
              onClick={handleClick}
            >
              Output
            </a>
          </div>
        </div>
      </div>
    </div>
  );
}
