import React, { useEffect, useState, useContext } from "react";
import { VideoForm } from "~/Components/videoForm";
import {
  extractVideoIdFromUrl,
  processVideo,
  downloadAudio,
} from "~/utils/api-client";
import { CustomLayout } from "~/Layout/CustomLayout";
import LoadingAnimation from "~/Components/loadingAnimation";
import { ModalContext } from "~/Components/modelSetting";

export default function transcribe() {
  const [onClick, setOnClick] = useState(true);
  const handleClick = () => setOnClick(!onClick);

  const [isProcessing, setProcessing] = useState(false);
  const [progressOutput, setProgressOutput] = useState("");
  const [resultTranscript, setResultTranscript] = useState("");

  const { language, model } = useContext(ModalContext);

  useEffect(() => {
    console.log("target language: ", language);
    console.log("model: ", model);
  }, [language, model]);

  const handleStartProcessing = async (videoUrl: string) => {
    // const video_Url = "https://www.youtube.com/watch?v=OQKbBCVDa7g";
    const videoId = extractVideoIdFromUrl(videoUrl); // sAuEeM_6zpk (string)

    console.log("Video id", videoId, "Model", model, "Language", language);

    if (typeof videoId === "string") {
      setResultTranscript("");
      setProcessing(true);

      const transcript = await processVideo(
        videoId,
        language,
        model,
        (message) => {
          setProgressOutput((prev) => prev + message);
        }
      );

      if (transcript) {
        setResultTranscript(transcript);
      } else {
        alert("Error cannot found transcript");
      }

      setProcessing(false);
    } else {
      alert("Invalid URL");
    }
  };

  return (
    <CustomLayout>
      <div className="flex h-screen w-screen flex-col items-center gap-1 p-1">
        <div className="no-scrollbar flex h-24 w-full justify-center overflow-y-scroll rounded-xl"></div>
        <div className="flex h-full w-[100vw] flex-col gap-2 sm:w-[80vw]">
          <div className="flex h-[90%] flex-col gap-4 rounded-xl bg-neutral p-4 shadow-md">
            <h1 className="text-center text-lg sm:text-2xl">
              Youtube transcribe generated by OpenAI Whisper
            </h1>
            <div className="">
              <VideoForm
                onSubmit={handleStartProcessing}
                isProcessing={isProcessing}
              />
            </div>

            {onClick ? (
              <textarea
                className="textarea-bordered textarea h-full"
                placeholder="Processing..."
                value={progressOutput}
                readOnly
              ></textarea>
            ) : (
              <textarea
                className="textarea-bordered textarea h-full"
                placeholder="Output"
                value={resultTranscript}
                readOnly
              ></textarea>
            )}

            <div className="tabs tabs-boxed justify-center">
              <a
                className={`tab ${onClick ? "tab-active" : ""}`}
                onClick={handleClick}
              >
                Processing
              </a>
              <a
                className={`tab ${!onClick ? "tab-active" : ""}`}
                onClick={handleClick}
              >
                Output
              </a>
            </div>
          </div>
        </div>
        <div className="flex h-14 w-full justify-end">
          <div className="h-14 w-14 ">
            {isProcessing ? (
              <div className="flex items-center justify-center">
                <LoadingAnimation />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </CustomLayout>
  );
}
